import telebot
import os, difflib
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from PIL import Image, ImageDraw, ImageFont
from main_ai import check_quran_ayah
from dotenv import load_dotenv

load_dotenv()

# ‚úÖ Telegram Bot Token
TOKEN = os.getenv('TELEGRAM_TOKEN')

bot = telebot.TeleBot(TOKEN)

# ‚úÖ Arabic Alphabet Pronunciations
arabic_alphabet = {
    "ÿß": "ÿ£ŸÑŸÅ", "ÿ®": "ÿ®ÿßÿ°", "ÿ™": "ÿ™ÿßÿ°", "ÿ´": "ÿ´ÿßÿ°",
    "ÿ¨": "ÿ¨ŸäŸÖ", "ÿ≠": "ÿ≠ÿßÿ°", "ÿÆ": "ÿÆÿßÿ°", "ÿØ": "ÿØÿßŸÑ",
    "ÿ∞": "ÿ∞ÿßŸÑ", "ÿ±": "ÿ±ÿßÿ°", "ÿ≤": "ÿ≤ÿßŸä", "ÿ≥": "ÿ≥ŸäŸÜ",
    "ÿ¥": "ÿ¥ŸäŸÜ", "ÿµ": "ÿµÿßÿØ", "ÿ∂": "ÿ∂ÿßÿØ", "ÿ∑": "ÿ∑ÿßÿ°",
    "ÿ∏": "ÿ∏ÿßÿ°", "ÿπ": "ÿπŸäŸÜ", "ÿ∫": "ÿ∫ŸäŸÜ", "ŸÅ": "ŸÅÿßÿ°",
    "ŸÇ": "ŸÇÿßŸÅ", "ŸÉ": "ŸÉÿßŸÅ", "ŸÑ": "ŸÑÿßŸÖ", "ŸÖ": "ŸÖŸäŸÖ",
    "ŸÜ": "ŸÜŸàŸÜ", "Ÿá": "Ÿáÿßÿ°", "Ÿà": "ŸàÿßŸà", "Ÿä": "Ÿäÿßÿ°"
}
quran_ayahs = {
    "ayah_1":"ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸëŸéŸáŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸíŸÖŸéŸÜŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸêŸäŸÖŸê",
    "ayah_2":"ÿßŸÑŸíÿ≠ŸéŸÖŸíÿØŸè ŸÑŸêŸÑŸëŸéŸáŸê ÿ±Ÿéÿ®ŸëŸê ÿßŸÑŸíÿπŸéÿßŸÑŸéŸÖŸêŸäŸÜŸé",
    "ayah_3":"ÿßŸÑÿ±ŸëŸéÿ≠ŸíŸÖŸéŸÜŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸêŸäŸÖŸê",
    "ayah_4":"ŸÖŸéÿßŸÑŸêŸÉŸê ŸäŸéŸàŸíŸÖŸê ÿßŸÑÿØŸëŸêŸäŸÜŸê",
    "ayah_5":"ÿ•ŸêŸäŸëŸéÿßŸÉŸé ŸÜŸéÿπŸíÿ®ŸèÿØŸè ŸàŸéÿ•ŸêŸäŸëŸéÿßŸÉŸé ŸÜŸéÿ≥Ÿíÿ™ŸéÿπŸêŸäŸÜŸè",
    "ayah_6":"ÿßŸáŸíÿØŸêŸÜŸéÿß ÿßŸÑÿµŸëŸêÿ±Ÿéÿßÿ∑Ÿé ÿßŸÑŸíŸÖŸèÿ≥Ÿíÿ™ŸéŸÇŸêŸäŸÖŸé",
    "ayah_7":"ÿµŸêÿ±Ÿéÿßÿ∑Ÿé ÿßŸÑŸëŸéÿ∞ŸêŸäŸÜŸé ÿ£ŸéŸÜŸíÿπŸéŸÖŸíÿ™Ÿé ÿπŸéŸÑŸéŸäŸíŸáŸêŸÖŸí ÿ∫ŸéŸäŸíÿ±Ÿê ÿßŸÑŸíŸÖŸéÿ∫Ÿíÿ∂ŸèŸàÿ®Ÿê ÿπŸéŸÑŸéŸäŸíŸáŸêŸÖŸí ŸàŸéŸÑŸéÿß ÿßŸÑÿ∂ŸëŸéÿßŸÑŸëŸêŸäŸÜŸé"
}

user_progress = {}

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±—É–∫–≤—ã"))
    markup.add(KeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ê–ª—å-–§–∞—Ç–∏—Ö—É"))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!** ‚ú®\n\n"
        "üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "1Ô∏è‚É£ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å **–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∞—Ä–∞–±—Å–∫–∏—Ö –±—É–∫–≤**\n"
        "2Ô∏è‚É£ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å **—á—Ç–µ–Ω–∏–µ —Å—É—Ä—ã –ê–ª—å-–§–∞—Ç–∏—Ö–∞**\n\n"
        "üöÄ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –Ω–∞—á–Ω–µ–º!**",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±—É–∫–≤—ã")
def start_letter_practice(message):
    chat_id = message.chat.id
    user_progress[chat_id] = {"lesson": "letter_practice", "index": 0}
    bot.reply_to(message, "üìñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –±—É–∫–≤!")
    send_next_letter(chat_id)

def send_next_letter(chat_id):
    lesson_data = user_progress.get(chat_id)
    if not lesson_data:
        return
    
    index = lesson_data["index"]
    letters = list(arabic_alphabet.keys())
    
    if index >= len(letters):
        bot.send_message(chat_id, "üéâ –ü—Ä–∞–∫—Ç–∏–∫–∞ –±—É–∫–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚úÖ")
        del user_progress[chat_id]
        return
    
    letter = letters[index]
    bot.send_message(chat_id, f"üî§ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —ç—Ç—É –±—É–∫–≤—É: **{letter}**", parse_mode="Markdown")
    bot.send_message(chat_id, "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.")

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ê–ª—å-–§–∞—Ç–∏—Ö—É")
def start_quran_practice(message):
    chat_id = message.chat.id
    user_progress[chat_id] = {"lesson": "quran_practice", "index": 0}
    bot.reply_to(message, "üìñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É —Å—É—Ä—ã –ê–ª—å-–§–∞—Ç–∏—Ö–∞!")
    send_next_ayah(chat_id)

def send_next_ayah(chat_id):
    lesson_data = user_progress.get(chat_id)
    if not lesson_data:
        return
    
    index = lesson_data["index"]
    if index >= len(quran_ayahs):
        bot.send_message(chat_id, "üéâ –ü—Ä–∞–∫—Ç–∏–∫–∞ –ê–ª—å-–§–∞—Ç–∏—Ö–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚úÖ")
        del user_progress[chat_id]
        return
    
    ayah = list(quran_ayahs.values())[index]
    bot.send_message(chat_id, f"üìñ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —ç—Ç–æ—Ç –∞—è—Ç:\n**{ayah}**", parse_mode="Markdown")
    bot.send_message(chat_id, "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    chat_id = message.chat.id
    if chat_id not in user_progress:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.")
        return

    lesson_type = user_progress[chat_id]["lesson"]
    index = user_progress[chat_id]["index"]

    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file_path = f"{chat_id}.ogg"
    
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, "wb") as f:
        f.write(downloaded_file)

    if lesson_type == "letter_practice":
        correct_letter = list(arabic_alphabet.keys())[index]
        is_correct, transcription, mess = check_quran_ayah(file_path, correct_letter)
    elif lesson_type == "quran_practice":
        correct_ayah = list(quran_ayahs.values())[index]
        is_correct, transcription, mess = check_quran_ayah(file_path, correct_ayah)
        error_highlight, feedback = highlight_mistake(correct_ayah, transcription)
    
    if mess=='text':
        if is_correct:
            bot.reply_to(message, "‚úÖ –í–µ—Ä–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ...")
            user_progress[chat_id]["index"] += 1
            if lesson_type == "letter_practice":
                send_next_letter(chat_id)
            else:
                send_next_ayah(chat_id)
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n**{correct_ayah if lesson_type == 'quran_practice' else correct_letter}**\nüìù –í—ã —Å–∫–∞–∑–∞–ª–∏:\n**{transcription}**"
            if lesson_type == "quran_practice":
                error_message += f"\nüîç –û—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ: **{error_highlight}**\nüí° –°–æ–≤–µ—Ç—ã: {feedback}"
            bot.reply_to(message, error_message, parse_mode="Markdown")
    else:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n**{correct_ayah if lesson_type == 'quran_practice' else correct_letter}**"
        bot.reply_to(message, error_message, parse_mode="Markdown")
    os.remove(file_path)

def highlight_mistake(correct_text, user_text):
    correct_words = correct_text.split()
    user_words = user_text.split()
    
    matcher = difflib.SequenceMatcher(None, correct_words, user_words)
    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag != 'equal':
            error_word = ' '.join(user_words[j1:j2]) if j1 < len(user_words) else "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)"
            feedback = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—É—á—à–µ –∞—Ä—Ç–∏–∫—É–ª–∏—Ä–æ–≤–∞—Ç—å –±—É–∫–≤—É –∏–ª–∏ –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –±—É–∫–≤." if error_word else "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ —á–µ—Ç—á–µ."
            return error_word, feedback
    return "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ."

if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling()
