import os, json, difflib, sqlalchemy as sa
import threading
from sqlalchemy.orm import sessionmaker, declarative_base
from telebot import TeleBot, types
from datetime import datetime, timedelta
from main_ai import check_quran_ayah
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å –∞—è—Ç–∞–º–∏
quran_ayahs_path = "files/quran_ayahs.json"
with open(quran_ayahs_path, "r", encoding="utf-8") as file:
    quran_ayahs = json.load(file)

user_progress = {}
user_data = {}

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É—Ä—ã –ê–ª—å-–§–∞—Ç–∏—Ö–∞
surah_fatiha = quran_ayahs.get("1", {})  # "1" - –Ω–æ–º–µ—Ä –ê–ª—å-–§–∞—Ç–∏—Ö–∏ –≤ –ö–æ—Ä–∞–Ω–µ
fatiha_ayahs = [surah_fatiha[str(i)] for i in range(1, len(surah_fatiha) + 1)]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///users.db"
engine = sa.create_engine(DATABASE_URL, echo=True)
Session = sessionmaker(bind=engine)
session = Session()

Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    
    chat_id = sa.Column(sa.Integer, primary_key=True)
    phone_number = sa.Column(sa.String, nullable=True)
    name = sa.Column(sa.String, nullable=False)
    age = sa.Column(sa.Integer, nullable=False)
    tajweed_studied = sa.Column(sa.String, nullable=False)
    teacher = sa.Column(sa.String, nullable=True)
    target = sa.Column(sa.String, nullable=False)
    al_fatiha_trials = sa.Column(sa.String)
    al_fatiha_done = sa.Column(sa.Boolean, nullable=False)
    last_session = sa.Column(sa.DateTime, nullable=False)
    want_trial = sa.Column(sa.Boolean, nullable=False)


Base.metadata.create_all(engine)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫
def create_inline_keyboard(buttons):
    markup = types.InlineKeyboardMarkup()
    for text, callback in buttons:
        markup.add(types.InlineKeyboardButton(text, callback_data=callback))
    return markup

# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@bot.message_handler(commands=['menu'])
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = int(message.chat.id)
    existing_user = session.query(User).filter_by(chat_id=chat_id).first()
    if existing_user:
        chat_id = existing_user.chat_id
        user_data[chat_id] = {
            "name": existing_user.name,
            "age": existing_user.age,
            "tajweed_studied": existing_user.tajweed_studied,
            "teacher": existing_user.teacher,
            "target": existing_user.target,
            "phone_number": existing_user.phone_number,
            "al_fatiha_trials": existing_user.al_fatiha_trials,
            "al_fatiha_done": existing_user.al_fatiha_done,
            "last_session": existing_user.last_session,
            "want_trial": existing_user.want_trial
        }
        
        if user_data[chat_id].get("al_fatiha_done", False):
            buttons = [("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "edit_profile"), ("–ü—Ä–∞–∫—Ç–∏–∫–∞ –ê–ª—å-–§–∞—Ç–∏—Ö–∏", "al_fatiha_practice"),
               ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", "trial_book")]
        else:
            buttons = [("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "edit_profile"), ("–ü—Ä–∞–∫—Ç–∏–∫–∞ –ê–ª—å-–§–∞—Ç–∏—Ö–∏", "al_fatiha_practice")]
        bot.send_message(chat_id, f"üìå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {existing_user.name}!", reply_markup=create_inline_keyboard(buttons))
    else:
        chat_id = message.chat.id
        bot.send_message(chat_id, "üìå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ê–ª—å-–§–∞—Ç–∏—Ö–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        msg = bot.send_message(chat_id, "üìõ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        user_data[chat_id] = {}
        user_data[chat_id]["delete"] = [msg.message_id]

@bot.callback_query_handler(func=lambda call: call.data == "edit_profile")
def edit_profile(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    user = session.query(User).filter_by(chat_id=chat_id).first()
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    profile_text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"üìõ –ò–º—è: {user.name}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
        f"üìñ –£—Ä–æ–≤–µ–Ω—å —Ç–∞–¥–∂–≤–∏–¥–∞: {user.tajweed_studied}\n"
        f"üë®‚Äçüè´ –£—á–∏–ª—Å—è: {user.teacher}\n"
        f"üéØ –¶–µ–ª—å: {user.target}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
    )
    bot.send_message(chat_id, profile_text, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == "trial_book")
def trial_book(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.delete_message(chat_id, call.message.message_id)
    send_trial_lesson_info(chat_id)


@bot.callback_query_handler(func=lambda call: call.data == "al_fatiha_practice")
def al_fatiha_practice(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, "üß† –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –ê–ª—å-–§–∞—Ç–∏—Ö–∏...")
    start_quran_practice(chat_id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and "name" not in user_data[message.chat.id])
def get_name(message):
    chat_id = message.chat.id
    message_id = message.message_id
    user_data[chat_id]["name"] = message.text
    for msg_id in user_data[chat_id].get("delete", []):
        bot.delete_message(chat_id, msg_id)
    user_data[chat_id]["delete"].clear()
    bot.delete_message(chat_id, message_id)
    msg = bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    user_data[chat_id]["delete"].append(msg.message_id)

@bot.message_handler(func=lambda message: message.chat.id in user_data and "age" not in user_data[message.chat.id])
def get_age(message):
    chat_id = message.chat.id
    message_id = message.message_id
    bot.delete_message(chat_id, message_id)
    if not message.text.isdigit():
        msg = bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º).")
        user_data[chat_id]["delete"].append(msg.message_id)
        return
    user_data[chat_id]["age"] = int(message.text)
    
    for msg_id in user_data[chat_id].get("delete", []):
        bot.delete_message(chat_id, msg_id)
    user_data[chat_id]["delete"].clear()

    buttons = [("–ù–µ—Ç, —Å –Ω—É–ª—è", "tajweed_none"), ("–ó–Ω–∞—é –∞–ª—Ñ–∞–≤–∏—Ç", "tajweed_alphabet"),
               ("–£–º–µ—é —á–∏—Ç–∞—Ç—å", "tajweed_read"), ("–ó–Ω–∞—é –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞–¥–∂–≤–∏–¥–∞", "tajweed_rules")]
    bot.send_message(chat_id, "üìñ –ò–∑—É—á–∞–ª–∏ –ª–∏ –≤—ã —Ç–∞–¥–∂–≤–∏–¥ —Ä–∞–Ω—å—à–µ?", reply_markup=create_inline_keyboard(buttons))

@bot.callback_query_handler(func=lambda call: call.data.startswith("tajweed_"))
def get_tajweed_studied(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    tajweed_mapping = {
        "tajweed_none": "–ù–µ—Ç, —Å –Ω—É–ª—è",
        "tajweed_alphabet": "–ó–Ω–∞—é –∞–ª—Ñ–∞–≤–∏—Ç",
        "tajweed_read": "–£–º–µ—é —á–∏—Ç–∞—Ç—å",
        "tajweed_rules": "–ó–Ω–∞—é –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞–¥–∂–≤–∏–¥–∞"
    }
    user_data[chat_id]["tajweed_studied"] = tajweed_mapping[call.data]

    if call.data in ["tajweed_read", "tajweed_rules"]:
        buttons = [("–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", "teacher_self"), ("–° —É—Å—Ç–∞–∑–æ–º", "teacher_tutor")]
        bot.edit_message_text("üìö –° –∫–µ–º –≤—ã –∏–∑—É—á–∞–ª–∏ —Ç–∞–¥–∂–≤–∏–¥?",chat_id, message_id, reply_markup=create_inline_keyboard(buttons))
    else:
        ask_target(chat_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("teacher_"))
def get_teacher(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    teacher_mapping = {
        "teacher_self": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
        "teacher_tutor": "–° —É—Å—Ç–∞–∑–æ–º"
    }
    user_data[chat_id]["teacher"] = teacher_mapping[call.data]
    ask_target(chat_id, message_id)

def ask_target(chat_id, message_id):
    buttons = [("–ò–∑—É—á–∞—Ç—å —Ä–µ–ª–∏–≥–∏—é —É–≥–ª—É–±–ª–µ–Ω–Ω–æ", "target_religion"),
               ("–ß–∏—Ç–∞—Ç—å/—É—á–∏—Ç—å –ö–æ—Ä–∞–Ω", "target_quran"),
               ("–ò–∑—É—á–∞—Ç—å –∞—Ä–∞–±—Å–∫–∏–π", "target_arabic")]
    bot.edit_message_text("üéØ –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è?", chat_id, message_id, reply_markup=create_inline_keyboard(buttons))

@bot.callback_query_handler(func=lambda call: call.data.startswith("target_"))
def get_study_target(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    target_mapping = {
        "target_religion": "–ò–∑—É—á–∞—Ç—å —Ä–µ–ª–∏–≥–∏—é —É–≥–ª—É–±–ª–µ–Ω–Ω–æ",
        "target_quran": "–ß–∏—Ç–∞—Ç—å/—É—á–∏—Ç—å –ö–æ—Ä–∞–Ω",
        "target_arabic": "–ò–∑—É—á–∞—Ç—å –∞—Ä–∞–±—Å–∫–∏–π"
    }
    user_data[chat_id]["target"] = target_mapping[call.data]

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button)
    bot.delete_message(chat_id, message_id)
    bot.send_message(chat_id, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=keyboard)

@bot.message_handler(content_types=['contact'])
def get_phone_number(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone_number"] = message.contact.phone_number

    user_is_saved_message = save_user_to_db(chat_id)
    
    msg = user_is_saved_message.get("msg")

    bot.send_message(chat_id, msg, reply_markup=types.ReplyKeyboardRemove())
    start_quran_practice(chat_id)

def save_user_to_db(chat_id):
    existing_user = session.query(User).filter_by(chat_id=chat_id).first()
    if existing_user:
        return {"code": 401, "msg": f"–û—à–∏–±–∫–∞! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {existing_user.name}", "user": existing_user}
    data = user_data[chat_id]
    new_user = User(
        chat_id = chat_id,
        phone_number=data["phone_number"],
        name=data["name"],
        age=data["age"],
        tajweed_studied=data["tajweed_studied"],
        teacher=data.get("teacher", "–ù–µ –∏–∑—É—á–∞–ª"),
        target=data["target"],
        al_fatiha_done = False,
        last_session = datetime.now(),
        want_trial = False
    )
    session.add(new_user)
    session.commit()
    del user_data[chat_id]
    return {"code":200, "msg": "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ê–ª—å-–§–∞—Ç–∏—Ö–∏!", "user": new_user}

def start_quran_practice(chat_id):

    user_progress[chat_id] = {
        "lesson": "quran_practice", 
        "surah": 1,
        "index": 1, 
        "known_words": set(),
        "attempts": 0,
        "start_time": datetime.now()}

    bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—Ä—ã –ê–ª—å –§–∞—Ç–∏—Ö–∞!")
    send_next_ayah(chat_id)

    threading.Timer(900, check_practice_timeout, args=[chat_id]).start()
    threading.Timer(1800, check_practice_timeout, args=[chat_id]).start()

def check_practice_timeout(chat_id):
    progress = user_progress.get(chat_id)
    if not progress or progress["lesson"] != "quran_practice":
        return
    progress['count'] = 0

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—à–ª–æ –ª–∏ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (datetime.now() - progress["start_time"] >= timedelta(minutes=15) and progress['count'] == 0) or (datetime.now() - progress["start_time"] >= timedelta(minutes=30) and progress['count'] == 1):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        update_ayah_attempt(chat_id, progress["attempts"])

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª—Å—è
        del user_progress[chat_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, "‚è≥ –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –ê–ª—å-–§–∞—Ç–∏—Ö–∏. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ!\n\n"
                                  "üë®‚Äçüè´ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ *–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫*, –≥–¥–µ —É—Å—Ç–∞–∑ –ª–∏—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.\n"
                                  "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        send_trial_lesson_info(chat_id)
        progress['count']+=1


def send_trial_lesson_info(chat_id):
    text = (
        "üìå *–ì—Ä—É–ø–ø—ã –Ω–∞–±–∏—Ä–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ, –ø–æ—ç—Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!* "
        "–°–µ–π—á–∞—Å —É—Ä–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ü–µ–Ω–µ –≤—Å–µ–≥–æ *990 —Ç–≥* –≤–º–µ—Å—Ç–æ *5000 —Ç–≥*! üéâ\n\n"
        "üìñ –ù–∞ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ —É—Å—Ç–∞–∑:\n"
        "‚úÖ –û—Ü–µ–Ω–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∞–¥–∂–≤–∏–¥–∞\n"
        "‚úÖ –û–±—ä—è—Å–Ω–∏—Ç, –∫–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—É—á–∏—Ç—å —Ç–∞–¥–∂–≤–∏–¥\n"
        "‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º* –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è\n\n"
        "üí° –ï—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", callback_data="trial_lesson"))
    markup.add(types.InlineKeyboardButton("–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="trial_not_interested"))

    bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "trial_lesson")
def trial_lesson_handler(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

    user = session.query(User).filter_by(chat_id=chat_id).first()
    
    if user:
        user.want_trial = True
        session.commit()

        text = (
            "‚åõ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "üìö –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —É—Ä–æ–∫ –∏ –∑–∞–ø–∏—à–µ—Ç –≤–∞—Å –Ω–∞ –Ω–µ–≥–æ.\n"
            "ü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞—à–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∑–Ω–∞–Ω–∏—è–º!\n\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∞—Å —Å—É—Ä—ã –∑–¥–µ—Å—å - /menu"
        )
        bot.send_message(chat_id, text, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data == "trial_not_interested")
def trial_not_interested(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None) 
    bot.send_message(chat_id, "üëå –•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ - /menu")


def send_next_ayah(chat_id):
    lesson_data = user_progress.get(chat_id)
    if not lesson_data:
        return
    surah_number = lesson_data["surah"]
    index = lesson_data["index"]
    if index > len(quran_ayahs[str(surah_number)]):
        bot.send_message(chat_id, "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Å–¥–∞–ª–∏ —Å—É—Ä—É –ê–ª—å –§–∞—Ç–∏—Ö–∞ ‚úÖ")
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.al_fatiha_done = True
            session.commit()
        send_trial_lesson_info(chat_id)
        # update_to_db_lesson_data()
        del user_progress[chat_id]
        return
    audio_ayah = open(f"files/{surah_number}_{index}.mp3", 'rb')
    ayah = quran_ayahs.get(str(surah_number)).get(str(index))
    transcript = ayah[1]
    ayah = ayah[0]
    known_words = lesson_data["known_words"]
    remaining_words = [word for word in ayah.split() if word not in known_words]
    
    if not remaining_words:
        lesson_data["index"] += 1
        send_next_ayah(chat_id)
        return
    
    bot.send_audio(chat_id, audio_ayah, caption=f"üìñ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —ç—Ç–æ—Ç –∞—è—Ç:\n**{ayah}**\n_{transcript}_", title="Mishary Rashid Alafasy", parse_mode="Markdown")
    bot.send_message(chat_id, "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.")
    audio_ayah.close()

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    
    chat_id = message.chat.id
    if chat_id not in user_progress:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.")
        return
    progress = user_progress.get(chat_id)
    progress["attempts"] += 1

    if progress.get('mistake_msg', None) != None:
        bot.edit_message_reply_markup(chat_id, progress.get('mistake_msg'), reply_markup=None)
        user_progress[chat_id]['mistake_msg'] = None


    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file_path = f"{chat_id}.ogg"

    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, "wb") as f:
        f.write(downloaded_file)
    if progress["lesson"] == "quran_practice":
        handle_ayah_voice(progress, file_path, message, chat_id)

def highlight_mistake(correct_text, user_text):
    correct_words = correct_text.split()
    user_words = user_text.split()

    matcher = difflib.SequenceMatcher(None, correct_words, user_words)

    correct_read = []
    mistakes = []
    feedback = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == "equal":
            correct_read.extend(user_words[j1:j2])  # Correctly read words
        elif tag == "replace" or tag == "delete":
            mistake_word = ' '.join(correct_words[i1:i2]) if i1 < len(correct_words) else "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)"
            mistakes.append(mistake_word)
            feedback.append(f"üî¥ –û—à–∏–±–∫–∞: **{mistake_word}** ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ—á–Ω–µ–µ –∏ –Ω–µ —Å–ø–µ—à–∞.")  
        elif tag == "insert":
            extra_word = ' '.join(user_words[j1:j2]) if j1 < len(user_words) else "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)"
            mistakes.append(extra_word)
            feedback.append(f"‚ö†Ô∏è –õ–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ: **{extra_word}** ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞.")
    if correct_read:
        correct_text_display = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:\n" + ' '.join(correct_read)  
    else: correct_text_display = None
    mistakes_display = "‚ùå –û—à–∏–±–∫–∏:\n" + (' '.join(mistakes) if mistakes else "–ù–µ—Ç –æ—à–∏–±–æ–∫!")

    return correct_text_display, mistakes_display, "\n".join(feedback) if feedback else "üéâ –û—Ç–ª–∏—á–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫!"



def handle_ayah_voice(progress, file_path, message, chat_id):
    ayah = quran_ayahs[str(progress["surah"])][str(progress["index"])][0]
    known_words = progress["known_words"]
    is_correct, transcription, mess = check_quran_ayah(file_path, ayah)
    correct_highlight, error_highlight, feedback = highlight_mistake(ayah, transcription)
    os.remove(file_path)

    if mess == 'text':
        correct_words = set(ayah.split())
        spoken_words = set(transcription.split())
        new_known_words = spoken_words & correct_words
        known_words.update(new_known_words)
        
        if known_words == correct_words:
            bot.reply_to(message, f"‚úÖ –í–µ—Ä–Ω–æ! –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å {progress['attempts']} –ø–æ–ø—ã—Ç–∫–∏(–æ–∫).")
            
            # ‚¨áÔ∏è –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
            update_ayah_attempt(chat_id, progress["attempts"])
            
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress["index"] += 1
            progress["known_words"] = set()
            progress["attempts"] = 0
            send_next_ayah(chat_id)

        else:
            
            remaining_words = [word for word in ayah.split() if word not in known_words]
            error_message = f"–í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏:\n**{transcription}**\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞—è—Ç –µ—â–µ —Ä–∞–∑"
            buttons = [("–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—à–∏–±–∫–∏", "check_errors"), ("–ü–æ–∫–∞–∑–∞—Ç—å –∞—è—Ç", "next_try")]
            markup = create_inline_keyboard(buttons)
            if correct_highlight:
                user_progress[chat_id]["last_feedback"] = error_message+f"\n\n**{correct_highlight}**\n**{error_highlight}**\nüí° –†–∞–∑–±–æ—Ä:\n{feedback}"
                msg = bot.reply_to(message, error_message, parse_mode="Markdown", reply_markup = markup)
            else:
                user_progress[chat_id]["last_feedback"] = error_message+f"\n\n–í–µ—Å—å –∞—è—Ç –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ"
                msg = bot.reply_to(message, error_message, parse_mode="Markdown", reply_markup = markup)
            user_progress[chat_id]['mistake_msg'] = msg.message_id
    else:
        bot.reply_to(message, transcription)

def update_ayah_attempt(chat_id: int, attempt_count: int):
    user = session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        current_trials = user.al_fatiha_trials or ""
        new_trials = current_trials + ("," if current_trials else "") + str(attempt_count)
        user.al_fatiha_trials = new_trials
        session.commit()
        print(f"[+] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è chat_id={chat_id}: {user.al_fatiha_trials}")
    else:
        print(f"[!] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id={chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ["check_errors", "next_try"])
def next_try(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data == 'check_errors':
        new_text = user_progress[chat_id].get("last_feedback", "–û—à–∏–±–∫–∞!")
        buttons = [(("–ü–æ–∫–∞–∑–∞—Ç—å –∞—è—Ç", "next_try"))]
        bot.edit_message_text(new_text, chat_id, message_id, reply_markup=create_inline_keyboard(buttons), parse_mode="Markdown")
    elif call.data == 'next_try':
        user_progress[chat_id]['last_feedback'] = ''
        user_progress[chat_id]['mistake_msg'] = None
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        send_next_ayah(chat_id)

if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling()  
