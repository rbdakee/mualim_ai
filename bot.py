from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot import types, TeleBot
import json, os, difflib

from main_ai import check_quran_ayah
from dotenv import load_dotenv

load_dotenv()

# ‚úÖ Telegram Bot Token
TOKEN = os.getenv('TELEGRAM_TOKEN')

bot = TeleBot(TOKEN)

file_base_path = "files/"

arabic_alphabet_path = f"{file_base_path}arabic_alphabet.json"
quran_ayahs_path = f"{file_base_path}quran_ayahs.json"
surah_mapping_path = f"{file_base_path}surah_mapping.json"


with open(arabic_alphabet_path, "r", encoding="utf-8") as file:
    arabic_alphabet = json.load(file)
with open(quran_ayahs_path, "r", encoding="utf-8") as file:
    quran_ayahs = json.load(file)
with open(surah_mapping_path, "r", encoding="utf-8") as file:
    surah_mapping = json.load(file)

user_progress = {}

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±—É–∫–≤—ã"))
    markup.add(KeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ö–æ—Ä–∞–Ω"))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!** ‚ú®\n\n"
        "üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "1Ô∏è‚É£ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å **–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∞—Ä–∞–±—Å–∫–∏—Ö –±—É–∫–≤**\n"
        "2Ô∏è‚É£ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å **—á—Ç–µ–Ω–∏–µ –ö–æ—Ä–∞–Ω–∞**\n\n"
        "üöÄ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –Ω–∞—á–Ω–µ–º!**",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±—É–∫–≤—ã")
def start_letter_practice(message):
    chat_id = message.chat.id
    user_progress[chat_id] = {"lesson": "letter_practice", "index": 0}
    bot.reply_to(message, "üìñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –±—É–∫–≤!")
    send_next_letter(chat_id)

def send_next_letter(chat_id):
    lesson_data = user_progress.get(chat_id)
    if not lesson_data:
        return
    
    index = lesson_data["index"]
    letters = list(arabic_alphabet.keys())
    
    if index >= len(letters):
        bot.send_message(chat_id, "üéâ –ü—Ä–∞–∫—Ç–∏–∫–∞ –±—É–∫–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚úÖ")
        del user_progress[chat_id]
        return
    
    letter = letters[index]
    bot.send_message(chat_id, f"üî§ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —ç—Ç—É –±—É–∫–≤—É: **{letter}**", parse_mode="Markdown")
    bot.send_message(chat_id, "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.")

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ö–æ—Ä–∞–Ω")
def choose_surah(message):
    chat_id = message.chat.id

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for surah_name in surah_mapping.keys():
        keyboard.add(types.KeyboardButton(surah_name))

    bot.send_message(chat_id, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—Ä—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in surah_mapping)
def start_quran_practice(message):
    chat_id = message.chat.id
    surah_name = message.text
    surah_number = surah_mapping[surah_name]

    user_progress[chat_id] = {
        "lesson": "quran_practice", 
        "surah": surah_number,
        "index": 1, 
        "known_words": set()}

    bot.reply_to(message, f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É —Å—É—Ä—ã {surah_name}!")
    send_next_ayah(chat_id)

def send_next_ayah(chat_id):
    lesson_data = user_progress.get(chat_id)
    if not lesson_data:
        return
    surah_number = lesson_data["surah"]
    index = lesson_data["index"]
    if index > len(quran_ayahs[str(surah_number)]):
        bot.send_message(chat_id, "üéâ –ü—Ä–∞–∫—Ç–∏–∫–∞ —ç—Ç–æ–π —Å—É—Ä—ã –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚úÖ\n–•–æ—á–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—É—Ä–µ?", reply_markup=main_menu())
        del user_progress[chat_id]
        return
    ayah = quran_ayahs.get(surah_number).get(str(index)) # Could be str or int. Need to check it
    known_words = lesson_data["known_words"]
    remaining_words = [word for word in ayah.split() if word not in known_words]
    
    if not remaining_words:
        lesson_data["index"] += 1
        send_next_ayah(chat_id)
        return
    
    bot.send_message(chat_id, f"üìñ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —ç—Ç–æ—Ç –∞—è—Ç:\n**{' '.join(remaining_words)}**", parse_mode="Markdown")
    bot.send_message(chat_id, "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    chat_id = message.chat.id
    if chat_id not in user_progress:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.")
        return
    progress = user_progress.get(chat_id)

    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file_path = f"{chat_id}.ogg"

    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, "wb") as f:
        f.write(downloaded_file)

    if progress["lesson"] == "letter_practice":
        handle_letter_voice(progress, file_path, message, chat_id)
    elif progress["lesson"] == "quran_practice":
        handle_ayah_voice(progress, file_path, message, chat_id)

def handle_letter_voice(progress, file_path, message, chat_id):
    correct_letter = list(arabic_alphabet.keys())[progress['index']]
    is_correct, transcription, mess = check_quran_ayah(file_path, correct_letter)
    os.remove(file_path)
    if mess=='text':
        if is_correct:
            bot.reply_to(message, "‚úÖ –í–µ—Ä–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ...")
            progress["index"] += 1
            send_next_letter(chat_id)
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n**{correct_letter}**\nüìù –í—ã —Å–∫–∞–∑–∞–ª–∏:\n**{transcription}**"
            bot.reply_to(message, error_message, parse_mode="Markdown")
    else:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n**{correct_letter}**"
        bot.reply_to(message, error_message, parse_mode="Markdown")

import difflib

def highlight_mistake(correct_text, user_text):
    correct_words = correct_text.split()
    user_words = user_text.split()

    matcher = difflib.SequenceMatcher(None, correct_words, user_words)

    correct_read = []
    mistakes = []
    feedback = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == "equal":
            correct_read.extend(user_words[j1:j2])  # Correctly read words
        elif tag == "replace" or tag == "delete":
            mistake_word = ' '.join(correct_words[i1:i2]) if i1 < len(correct_words) else "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)"
            mistakes.append(mistake_word)
            feedback.append(f"üî¥ –û—à–∏–±–∫–∞: **{mistake_word}** ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ—á–Ω–µ–µ –∏ –Ω–µ —Å–ø–µ—à–∞.")  
        elif tag == "insert":
            extra_word = ' '.join(user_words[j1:j2]) if j1 < len(user_words) else "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)"
            mistakes.append(extra_word)
            feedback.append(f"‚ö†Ô∏è –õ–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ: **{extra_word}** ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞.")
    if correct_read:
        correct_text_display = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:\n" + ' '.join(correct_read)  
    else: correct_text_display = None
    mistakes_display = "‚ùå –û—à–∏–±–∫–∏:\n" + (' '.join(mistakes) if mistakes else "–ù–µ—Ç –æ—à–∏–±–æ–∫!")

    return correct_text_display, mistakes_display, "\n".join(feedback) if feedback else "üéâ –û—Ç–ª–∏—á–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫!"



def handle_ayah_voice(progress, file_path, message, chat_id):
    ayah = quran_ayahs[str(progress["surah"])][str(progress["index"])]
    known_words = progress["known_words"]
    is_correct, transcription, mess = check_quran_ayah(file_path, ayah)
    correct_highlight, error_highlight, feedback = highlight_mistake(ayah, transcription)
    os.remove(file_path)

    if mess == 'text':
        correct_words = set(ayah.split())
        spoken_words = set(transcription.split())
        new_known_words = spoken_words & correct_words
        known_words.update(new_known_words)
        
        if known_words == correct_words:
            bot.reply_to(message, "‚úÖ –í–µ—Ä–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ...")
            progress["index"] += 1
            progress["known_words"] = set()
            send_next_ayah(chat_id)
        else:
            remaining_words = [word for word in ayah.split() if word not in known_words]
            error_message = f"–í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏:\n**{transcription}**"
            if correct_highlight:
                error_message += f"\n**{correct_highlight}**\n**{error_highlight}**\nüí° –†–∞–∑–±–æ—Ä:\n{feedback}"
                bot.reply_to(message, error_message, parse_mode="Markdown")
                new_message = f"üí° –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –æ—à–∏–±–∫–∏ ‚Äî —á–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è!\nüìñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞—Ç—å **–∞—è—Ç –∏–ª–∏ —Ç–æ, —á—Ç–æ –¥–∞–µ—Ç—Å—è –≤–∞–º —Å–ª–æ–∂–Ω–æ**\n\n–í–µ—Å—å –ê—è—Ç:\n**{ayah}**"
                new_message += f"\n–°–ª–æ–∂–Ω—ã–µ —á–∞—Å—Ç–∏:\nüîπ **{' '.join(remaining_words)}**"
                new_message += "\n\nüìñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –Ø —É–≤–µ—Ä–µ–Ω, —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è! üòä"
            else:
                error_message += f"\n\n–í–µ—Å—å –∞—è—Ç –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ"
                bot.reply_to(message, error_message, parse_mode="Markdown")
                new_message = f"–í–∏–¥–∏–º–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –∏–ª–∏ —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∞—è—Ç:\n{ayah}"
                
            bot.send_message(chat_id, new_message, parse_mode="Markdown")
    else:
        bot.reply_to(message, transcription)


if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling()